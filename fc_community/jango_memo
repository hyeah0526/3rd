<Framework Django 기초>

1. 가상환경 설치
pip3 install virtualenv

2. 폴더 생성
virtualenv 프로젝트 이름
virtualenv fcdjango_venv 

3. 활성화시키기
fcdjango_venv/scripts/activate

4. 장고 설치
pip3 install django

5. 프로젝트 만들기
django-admin startproject 프로젝트이름
django-admin startproject fc_community

6. 만든 프로젝트 안으로 들어가기
cd fc_community

7. 그 안에 app만들기
django-admin startapp board
django-admin startapp fcuser

프로젝트 ? 커뮤니티가 프로젝트
app ? 그안에 들어가는 것들 묶음 단위

8. board안에 templates폴더 생성

9. app까지 다 만들었으면 seetings.py안에가서 
INSTALLED_APPS = []
여기안에 생성한 것들 추가
board, fcuser

 -----------------------------------------------
여기부터 Model
10. models.py열어서 수정

11. 터미널에서 마이그레이션 생성
python manage.py makemigrations
이렇게하면 model을 참고해서 DB만들어줌...

12. DB생성하기
python manage.py migrate

13. DB계정생성
python manage.py createsuperuser
 
14. admin.py에 추가해주기
from .models import Fcuser
class FcuserAdmin(admin.ModelAdmin):
    pass
admin.site.register(Fcuser, FcuserAdmin)
이렇게 추가해주면 다시 127.0.0.1:8000/admin사이트에 추가된것을 확인할 수 있음

15.
만약 새롭게 추가한다면 (email추가)) models.py를 수정후
터미널에 makemigrationgs해주기
python manage.py makemigrations
그럼이제 어떤값을 넣을건지 물어보는데 선택 후 작성

16.
다 해줬다면 다시 마이그레이션 해서 DB에 업뎃해주기
python manage.py migrate
----
회원가입 템플릿 만들기
1. html생성

2. 경로추가

3. 해당 html의 form태그 안에  아래 내용을 꼭 작성해 줘야함
검증해주는 작업을 장고가 대신해줌
 {% csrf_token %}

4. views.py에서 백엔드코드작성


----------------------------------------------------------------------
블록 지정해서 사용하는 방법
1. 기초틀이 될 html을 만들어준다
2. 가장 큰 틀을 설정 하고 들어갈 영역 부분에 작성해준다 
    {% block 블록명 %} 블록이 시작하는지점
    {% endblock %} 블록이 끝나는 지점
3. 이제 다른 html로 가서 먼저 해당 기초틀을 상속받아준다
    {% extends "기초틀이 될 html이름" %}
4. 아까 지정했던 블록명을 사용하여 시작과 끝을 지정해준다
    {% block 블록명 %}
    {% endblock %}
----------------------------------------------------------------------
forms.py 사용방법
장고가 제공하는 form을 사용
1. 받아야하는 값을 forms.py 생성후 작성
from django import forms

class LoginForm(forms.Form):
    # 받아야하는 값 설정
    username = forms.CharField(max_length=32)
    password = forms.CharField()

2. views.py에서 코드 작성
